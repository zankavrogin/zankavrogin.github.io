- wrap_layout :layout do
  %section#intro
    .container
      %p 
        As we move towards greater Internet integration of devices, or as it has become popularly known the “<em>Internet Of Things</em>”, we need to figure out how to keep these new mission-critical systems running. Are the new rules the same as the old rules? Like so many things, they are an extrapolation of those lessons learned upon which the previous generation has built, with a few new twists.

      %p 
        Let us define the term “<strong>RobotOps</strong>” to mean “<strong>DevOps For Robots</strong>”. RobotOps means applying the various patterns and practices that keep the the real-world web operating, in the same fashion that these practices have kept high-traffic internet application running. 

      %p 
        Especially as businesses, governments, and other organizations count on distributed sensor network data, as well as robots and drones, as part of their mission-critical infrastructure, these practices will be absolutely essential. 

  .container
    .item
      .span-8
        %h3 Test Driven Robotics
        %p 
          Applying test-driven development has been the secret sauce for top development teams to deliver new code confidently, and quickly. Test driven robotics uses this same approach towards development of embedded systems and other device-centric code.
      .span-4.omega.home-icons
        %img{:src => "/images/01.png", :alt => ""}/

    .item
      .span-8
        %h3 Command Line Interface
        %p 
          Updates to firmware, restarting devices, and other crucial activities must be able to be performed entirely using command line interfaces. There is simply no way to operate at scale without being able to automate these processes.
      .span-4.omega.home-icons
        %img{:src => "/images/02.png", :alt => ""}/

    .item
      .span-8
        %h3 Multiple Platforms/Devices
        %p 
          Writing entirely different code to incorporate similar devices is inefficient, and makes it hard to add new developers to projects, or even for existing developers to understand their own work. Having standard coding practices that work across product lines is key to sustaining development velocity, and maintaining quality. This can also help with vendor interoperability.
      .span-4.omega.home-icons
        %img{:src => "/images/03.png", :alt => ""}/

    .item
      .span-8
        %h3 Code Generators
        %p 
          Not all code can be generated, but being able to generate the skeleton code to start new projects, or to add new hardware support, is key to maintaining consistency, as well as increasing development velocity. 
      .span-4.omega.home-icons
        %img{:src => "/images/04.png", :alt => ""}/

    .item
      .span-8
        %h3 Swarms
        %p 
          It needs to be easy to coordinate multiple devices together is a seamless way without making extensive code changes. Devices will be deployed en masse, and they must be able to coordinate their own activities, as well as be able to receive commands from HQ.
      .span-4.omega.home-icons
        %img{:src => "/images/05.png", :alt => ""}/

    .item
      .span-8
        %h3 Built-In API
        %p 
          Integration with other systems is absolutely crucial. You need to be able to both call out from your robotics framework, as well as being able to be called from external systems. Both web-based protocols, as well as other, lightweight real-time protocols, need to be supported.
      .span-4.omega.home-icons
        %img{:src => "/images/06.png", :alt => ""}/

    .item
      .span-8
        %h3 Declarative Code Syntax
        %p
          Just like a router has a built-in admin page, you need some kind of admin control panel. This is key to troubleshooting field problems, as well as sometimes allowing users to resolve their own issues.
      .span-4.omega.home-icons
        %img{:src => "/images/07.png", :alt => ""}/

    .item
      .span-8
        %h3 Admin Tools
        %p
          Being able to write code to describe what the system should do, is at the heart of any framework. Years of research into artificial intelligence and human machine interfaces, have shown that it is easier for programmers to communicate with the users, by using declarative syntax. For example, the use of Domain Specific Languages (DSLs).
      .span-4.omega.home-icons
        %img{:src => "/images/08.png", :alt => ""}/

    .item
      .span-8
        %h3 Documentation & Support
        %p
          Documentation is essential to being able to get work done, as well as making any needed hotfixes.
      .span-4.omega.home-icons
        %img{:src => "/images/09.png", :alt => ""}/

    .item
      .span-8
        %h3 Security
        %p
          Authentication & authorization need to be handled, especially given the sensitive nature of sensor data, and the possible risks to infrastructure.
      .span-4.omega.home-icons
        %img{:src => "/images/10.png", :alt => ""}/


  %section#join 
    .container
      .span-8
        %h3 Join the Cause
        %p 
          Our own open source frameworks Cylon.js (http://cylonjs.com), Artoo (http://artoo.io), and Gobot (http://gobot.io) is where we are developing platforms that incorporate some or all 10 of these key characteristics. We strongly encourage other framework creators, as well as device manufacturers, and those who work in closed source, to collaborate together to help establish a set of guidelines for industry best practices.

        %p 
          Getting a handle on RobotOps now is absolutely essential to the successful adoption of the Internet of Things. Working together as an industry, we can help to accelerate the adoption as well as to improve the experiences of the users that this new generation of devices is intended to serve.
